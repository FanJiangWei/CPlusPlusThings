/* This linker script generated from xt-genldscripts.tpp for LSP . */
/* Linker Script for ld -N */
MEMORY
{
  sysinfo_seg :                       	org = 0x40000000, len = 0x100
  iram18_seg :                        	org = 0x40000100, len = 0x100
  ResetEpilog.text_seg :              	org = 0x40000200, len = 0x200
  WindowVectors.text_seg :            	org = 0x40000400, len = 0x178
  iram1_seg :                         	org = 0x40000578, len = 0x8
  Level2InterruptVector.text_seg :    	org = 0x40000580, len = 0x38
  iram3_seg :                         	org = 0x400005B8, len = 0x8
  Level3InterruptVector.text_seg :    	org = 0x400005C0, len = 0x38
  iram5_seg :                         	org = 0x400005F8, len = 0x8
  Level4InterruptVector.text_seg :    	org = 0x40000600, len = 0x38
  iram7_seg :                         	org = 0x40000638, len = 0x8
  Level5InterruptVector.text_seg :    	org = 0x40000640, len = 0x38
  iram9_seg :                         	org = 0x40000678, len = 0x8
  DebugExceptionVector.text_seg :     	org = 0x40000680, len = 0x38
  iram11_seg :                        	org = 0x400006B8, len = 0x8
  NMIExceptionVector.text_seg :       	org = 0x400006C0, len = 0x38
  iram13_seg :                        	org = 0x400006F8, len = 0x8
  KernelExceptionVector.text_seg :    	org = 0x40000700, len = 0x38
  iram15_seg :                        	org = 0x40000738, len = 0x8
  UserExceptionVector.text_seg :      	org = 0x40000740, len = 0x38
  iram17_seg :                        	org = 0x40000778, len = 0x48
  DoubleExceptionVector.text_seg :    	org = 0x400007C0, len = 0x40
  exc_seg :                           	org = 0x40000800, len = 0x200
  sram20_seg :                        	org = 0x40000A00, len = 0x13F600
  irom0_seg :                         	org = 0x7E190000, len = 0x70000
  scmask_seg :                        	org = 0xD3004000, len = 0x4000
  rtbat_seg :                         	org = 0xD3008000, len = 0x8000
  scg_seg :                           	org = 0xD3010000, len = 0x10000
  snr_seg :                           	org = 0xD3020000, len = 0x10000
  scrm_seg :                          	org = 0xD3030000, len = 0x10000
  beta_seg :                          	org = 0xD3040000, len = 0x10000
  pd_pat_seg :                        	org = 0xD3050000, len = 0x10000
  cau_istr_seg :                      	org = 0xD3060000, len = 0x2000
  cau_lut0_seg :                      	org = 0xD3062000, len = 0x1000
  cau_lut1_seg :                      	org = 0xD3063000, len = 0xD000
  cau_mem0_seg :                      	org = 0xD3070000, len = 0x10000
  cau_mem1_seg :                      	org = 0xD3080000, len = 0x10000
  cau_mem2_seg :                      	org = 0xD3090000, len = 0x10000
  cau_mem3_seg :                      	org = 0xD30A0000, len = 0x10000
  sc_intl_map0_seg :                  	org = 0xD30B0000, len = 0x201
  sc_intl_map1_seg :                  	org = 0xD30C0000, len = 0x201
  sc_intl_idx0_seg :                  	org = 0xD30D0000, len = 0x401
  sc_intl_idx1_seg :                  	org = 0xD30E0000, len = 0x401
  ResetVector.text_seg :              	org = 0xFE000000, len = 0x300
}

PHDRS
{
  sysinfo_phdr PT_LOAD;
  iram18_phdr PT_LOAD;
  ResetEpilog.text_phdr PT_LOAD;
  WindowVectors.text_phdr PT_LOAD;
  iram1_phdr PT_LOAD;
  Level2InterruptVector.text_phdr PT_LOAD;
  iram3_phdr PT_LOAD;
  Level3InterruptVector.text_phdr PT_LOAD;
  iram5_phdr PT_LOAD;
  Level4InterruptVector.text_phdr PT_LOAD;
  iram7_phdr PT_LOAD;
  Level5InterruptVector.text_phdr PT_LOAD;
  iram9_phdr PT_LOAD;
  DebugExceptionVector.text_phdr PT_LOAD;
  iram11_phdr PT_LOAD;
  NMIExceptionVector.text_phdr PT_LOAD;
  iram13_phdr PT_LOAD;
  KernelExceptionVector.text_phdr PT_LOAD;
  iram15_phdr PT_LOAD;
  UserExceptionVector.text_phdr PT_LOAD;
  iram17_phdr PT_LOAD;
  DoubleExceptionVector.text_phdr PT_LOAD;
  exc_phdr PT_LOAD;
  sram20_phdr PT_LOAD;
  sram20_bss_phdr PT_LOAD;
  irom0_phdr PT_LOAD;
  scmask_phdr PT_LOAD;
  rtbat_phdr PT_LOAD;
  scg_phdr PT_LOAD;
  snr_phdr PT_LOAD;
  scrm_phdr PT_LOAD;
  beta_phdr PT_LOAD;
  pd_pat_phdr PT_LOAD;
  cau_istr_phdr PT_LOAD;
  cau_lut0_phdr PT_LOAD;
  cau_lut1_phdr PT_LOAD;
  cau_mem0_phdr PT_LOAD;
  cau_mem1_phdr PT_LOAD;
  cau_mem2_phdr PT_LOAD;
  cau_mem3_phdr PT_LOAD;
  sc_intl_map0_phdr PT_LOAD;
  sc_intl_map1_phdr PT_LOAD;
  sc_intl_idx0_phdr PT_LOAD;
  sc_intl_idx1_phdr PT_LOAD;
  ResetVector.text_phdr PT_LOAD;
}


/*  Default entry point:  */
ENTRY(_start)
PROVIDE(_memmap_vecbase_reset = 0x40000400);
/* Various memory-map dependent cache attribute settings: */
_memmap_cacheattr_wb_base = 0x77037770;
_memmap_cacheattr_wt_base = 0xBB03BBB0;
_memmap_cacheattr_bp_base = 0x33033330;
_memmap_cacheattr_unused_mask = 0x00F0000F;
_memmap_cacheattr_wb_trapnull = 0x7733777C;
_memmap_cacheattr_wba_trapnull = 0x7733777C;
_memmap_cacheattr_wbna_trapnull = 0x7733777C;
_memmap_cacheattr_wt_trapnull = 0xBB33BBBC;
_memmap_cacheattr_bp_trapnull = 0x3333333C;
_memmap_cacheattr_wb_strict = 0x77C3777C;
_memmap_cacheattr_wt_strict = 0xBBC3BBBC;
_memmap_cacheattr_bp_strict = 0x33C3333C;
_memmap_cacheattr_wb_allvalid = 0x77337773;
_memmap_cacheattr_wt_allvalid = 0xBB33BBB3;
_memmap_cacheattr_bp_allvalid = 0x33333333;
PROVIDE(_memmap_cacheattr_reset = _memmap_cacheattr_wb_trapnull);

SECTIONS
{

  .srom.rodata : ALIGN(4)
  {
    _srom_rodata_start = ABSOLUTE(.);
    *(.srom.rodata)
    _srom_rodata_end = ABSOLUTE(.);
  } >irom0_seg :irom0_phdr

  .srom.text : ALIGN(4)
  {
    _srom_text_start = ABSOLUTE(.);
    *(.srom.literal .srom.text)
    . = ALIGN(4);
    _rom_store_table = .;
    LONG(_sysinfo_literal_start);
    LONG(_sysinfo_literal_end);
    LONG(LOADADDR(.sysinfo.literal));
    LONG(_ResetEpilog_literal_start);
    LONG(_ResetEpilog_literal_end);
    LONG(LOADADDR(.ResetEpilog.literal));
    LONG(_ResetEpilog_text_start);
    LONG(_ResetEpilog_text_end);
    LONG(LOADADDR(.ResetEpilog.text));
    LONG(_WindowVectors_text_start);
    LONG(_WindowVectors_text_end);
    LONG(LOADADDR(.WindowVectors.text));
    LONG(_Level2InterruptVector_literal_start);
    LONG(_Level2InterruptVector_literal_end);
    LONG(LOADADDR(.Level2InterruptVector.literal));
    LONG(_Level2InterruptVector_text_start);
    LONG(_Level2InterruptVector_text_end);
    LONG(LOADADDR(.Level2InterruptVector.text));
    LONG(_Level3InterruptVector_literal_start);
    LONG(_Level3InterruptVector_literal_end);
    LONG(LOADADDR(.Level3InterruptVector.literal));
    LONG(_Level3InterruptVector_text_start);
    LONG(_Level3InterruptVector_text_end);
    LONG(LOADADDR(.Level3InterruptVector.text));
    LONG(_Level4InterruptVector_literal_start);
    LONG(_Level4InterruptVector_literal_end);
    LONG(LOADADDR(.Level4InterruptVector.literal));
    LONG(_Level4InterruptVector_text_start);
    LONG(_Level4InterruptVector_text_end);
    LONG(LOADADDR(.Level4InterruptVector.text));
    LONG(_Level5InterruptVector_literal_start);
    LONG(_Level5InterruptVector_literal_end);
    LONG(LOADADDR(.Level5InterruptVector.literal));
    LONG(_Level5InterruptVector_text_start);
    LONG(_Level5InterruptVector_text_end);
    LONG(LOADADDR(.Level5InterruptVector.text));
    LONG(_DebugExceptionVector_literal_start);
    LONG(_DebugExceptionVector_literal_end);
    LONG(LOADADDR(.DebugExceptionVector.literal));
    LONG(_DebugExceptionVector_text_start);
    LONG(_DebugExceptionVector_text_end);
    LONG(LOADADDR(.DebugExceptionVector.text));
    LONG(_NMIExceptionVector_literal_start);
    LONG(_NMIExceptionVector_literal_end);
    LONG(LOADADDR(.NMIExceptionVector.literal));
    LONG(_NMIExceptionVector_text_start);
    LONG(_NMIExceptionVector_text_end);
    LONG(LOADADDR(.NMIExceptionVector.text));
    LONG(_KernelExceptionVector_literal_start);
    LONG(_KernelExceptionVector_literal_end);
    LONG(LOADADDR(.KernelExceptionVector.literal));
    LONG(_KernelExceptionVector_text_start);
    LONG(_KernelExceptionVector_text_end);
    LONG(LOADADDR(.KernelExceptionVector.text));
    LONG(_UserExceptionVector_literal_start);
    LONG(_UserExceptionVector_literal_end);
    LONG(LOADADDR(.UserExceptionVector.literal));
    LONG(_UserExceptionVector_text_start);
    LONG(_UserExceptionVector_text_end);
    LONG(LOADADDR(.UserExceptionVector.text));
    LONG(_DoubleExceptionVector_literal_start);
    LONG(_DoubleExceptionVector_literal_end);
    LONG(LOADADDR(.DoubleExceptionVector.literal));
    LONG(_DoubleExceptionVector_text_start);
    LONG(_DoubleExceptionVector_text_end);
    LONG(LOADADDR(.DoubleExceptionVector.text));
    LONG(_exc_start);
    LONG(_exc_end);
    LONG(LOADADDR(.exc));
    LONG(_sram_rodata_start);
    LONG(_sram_rodata_end);
    LONG(LOADADDR(.sram.rodata));
    LONG(_rodata_start);
    LONG(_rodata_end);
    LONG(LOADADDR(.rodata));
    LONG(_lit4_start);
    LONG(_lit4_end);
    LONG(LOADADDR(.lit4));
    LONG(_ResetVector_literal_start);
    LONG(_ResetVector_literal_end);
    LONG(LOADADDR(.ResetVector.literal));
    LONG(_sram_text_start);
    LONG(_sram_text_end);
    LONG(LOADADDR(.sram.text));
    LONG(_text_start);
    LONG(_text_end);
    LONG(LOADADDR(.text));
    LONG(_sram_data_start);
    LONG(_sram_data_end);
    LONG(LOADADDR(.sram.data));
    LONG(_data_start);
    LONG(_data_end);
    LONG(LOADADDR(.data));
    LONG(_scmask_data_start);
    LONG(_scmask_data_end);
    LONG(LOADADDR(.scmask.data));
    LONG(_rtbat_data_start);
    LONG(_rtbat_data_end);
    LONG(LOADADDR(.rtbat.data));
    LONG(_scg_data_start);
    LONG(_scg_data_end);
    LONG(LOADADDR(.scg.data));
    LONG(_snr_data_start);
    LONG(_snr_data_end);
    LONG(LOADADDR(.snr.data));
    LONG(_scrm_data_start);
    LONG(_scrm_data_end);
    LONG(LOADADDR(.scrm.data));
    LONG(_beta_data_start);
    LONG(_beta_data_end);
    LONG(LOADADDR(.beta.data));
    LONG(_pd_pat_data_start);
    LONG(_pd_pat_data_end);
    LONG(LOADADDR(.pd_pat.data));
    LONG(_cau_istr_data_start);
    LONG(_cau_istr_data_end);
    LONG(LOADADDR(.cau_istr.data));
    LONG(_cau_lut0_data_start);
    LONG(_cau_lut0_data_end);
    LONG(LOADADDR(.cau_lut0.data));
    LONG(_cau_lut1_data_start);
    LONG(_cau_lut1_data_end);
    LONG(LOADADDR(.cau_lut1.data));
    LONG(_cau_mem0_data_start);
    LONG(_cau_mem0_data_end);
    LONG(LOADADDR(.cau_mem0.data));
    LONG(_cau_mem1_data_start);
    LONG(_cau_mem1_data_end);
    LONG(LOADADDR(.cau_mem1.data));
    LONG(_cau_mem2_data_start);
    LONG(_cau_mem2_data_end);
    LONG(LOADADDR(.cau_mem2.data));
    LONG(_cau_mem3_data_start);
    LONG(_cau_mem3_data_end);
    LONG(LOADADDR(.cau_mem3.data));
    LONG(_sc_intl_map0_data_start);
    LONG(_sc_intl_map0_data_end);
    LONG(LOADADDR(.sc_intl_map0.data));
    LONG(_sc_intl_map1_data_start);
    LONG(_sc_intl_map1_data_end);
    LONG(LOADADDR(.sc_intl_map1.data));
    LONG(_sc_intl_idx0_data_start);
    LONG(_sc_intl_idx0_data_end);
    LONG(LOADADDR(.sc_intl_idx0.data));
    LONG(_sc_intl_idx1_data_start);
    LONG(_sc_intl_idx1_data_end);
    LONG(LOADADDR(.sc_intl_idx1.data));
    LONG(0);
    LONG(0);
    LONG(0);
    _rom_store = .;
    _srom_text_end = ABSOLUTE(.);
  } >irom0_seg :irom0_phdr

  .sysinfo.literal : AT(LOADADDR(.srom.text) + ((SIZEOF(.srom.text) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _sysinfo_literal_start = ABSOLUTE(.);
    *(.sysinfo.literal)
    _sysinfo_literal_end = ABSOLUTE(.);
  } >sysinfo_seg :sysinfo_phdr

  .ResetEpilog.literal : AT(LOADADDR(.sysinfo.literal) + ((SIZEOF(.sysinfo.literal) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _ResetEpilog_literal_start = ABSOLUTE(.);
    *(.ResetEpilog.literal)
    _ResetEpilog_literal_end = ABSOLUTE(.);
  } >iram18_seg :iram18_phdr

  .ResetEpilog.text : AT(LOADADDR(.ResetEpilog.literal) + ((SIZEOF(.ResetEpilog.literal) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _ResetEpilog_text_start = ABSOLUTE(.);
    *(.ResetEpilog.text)
    _ResetEpilog_text_end = ABSOLUTE(.);
  } >ResetEpilog.text_seg :ResetEpilog.text_phdr

  .WindowVectors.text : AT(LOADADDR(.ResetEpilog.text) + ((SIZEOF(.ResetEpilog.text) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _WindowVectors_text_start = ABSOLUTE(.);
    KEEP (*(.WindowVectors.text))
    _WindowVectors_text_end = ABSOLUTE(.);
  } >WindowVectors.text_seg :WindowVectors.text_phdr

  .Level2InterruptVector.literal : AT(LOADADDR(.WindowVectors.text) + ((SIZEOF(.WindowVectors.text) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _Level2InterruptVector_literal_start = ABSOLUTE(.);
    *(.Level2InterruptVector.literal)
    _Level2InterruptVector_literal_end = ABSOLUTE(.);
  } >iram1_seg :iram1_phdr

  .Level2InterruptVector.text : AT(LOADADDR(.Level2InterruptVector.literal) + ((SIZEOF(.Level2InterruptVector.literal) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _Level2InterruptVector_text_start = ABSOLUTE(.);
    KEEP (*(.Level2InterruptVector.text))
    _Level2InterruptVector_text_end = ABSOLUTE(.);
  } >Level2InterruptVector.text_seg :Level2InterruptVector.text_phdr

  .Level3InterruptVector.literal : AT(LOADADDR(.Level2InterruptVector.text) + ((SIZEOF(.Level2InterruptVector.text) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _Level3InterruptVector_literal_start = ABSOLUTE(.);
    *(.Level3InterruptVector.literal)
    _Level3InterruptVector_literal_end = ABSOLUTE(.);
  } >iram3_seg :iram3_phdr

  .Level3InterruptVector.text : AT(LOADADDR(.Level3InterruptVector.literal) + ((SIZEOF(.Level3InterruptVector.literal) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _Level3InterruptVector_text_start = ABSOLUTE(.);
    KEEP (*(.Level3InterruptVector.text))
    _Level3InterruptVector_text_end = ABSOLUTE(.);
  } >Level3InterruptVector.text_seg :Level3InterruptVector.text_phdr

  .Level4InterruptVector.literal : AT(LOADADDR(.Level3InterruptVector.text) + ((SIZEOF(.Level3InterruptVector.text) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _Level4InterruptVector_literal_start = ABSOLUTE(.);
    *(.Level4InterruptVector.literal)
    _Level4InterruptVector_literal_end = ABSOLUTE(.);
  } >iram5_seg :iram5_phdr

  .Level4InterruptVector.text : AT(LOADADDR(.Level4InterruptVector.literal) + ((SIZEOF(.Level4InterruptVector.literal) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _Level4InterruptVector_text_start = ABSOLUTE(.);
    KEEP (*(.Level4InterruptVector.text))
    _Level4InterruptVector_text_end = ABSOLUTE(.);
  } >Level4InterruptVector.text_seg :Level4InterruptVector.text_phdr

  .Level5InterruptVector.literal : AT(LOADADDR(.Level4InterruptVector.text) + ((SIZEOF(.Level4InterruptVector.text) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _Level5InterruptVector_literal_start = ABSOLUTE(.);
    *(.Level5InterruptVector.literal)
    _Level5InterruptVector_literal_end = ABSOLUTE(.);
  } >iram7_seg :iram7_phdr

  .Level5InterruptVector.text : AT(LOADADDR(.Level5InterruptVector.literal) + ((SIZEOF(.Level5InterruptVector.literal) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _Level5InterruptVector_text_start = ABSOLUTE(.);
    KEEP (*(.Level5InterruptVector.text))
    _Level5InterruptVector_text_end = ABSOLUTE(.);
  } >Level5InterruptVector.text_seg :Level5InterruptVector.text_phdr

  .DebugExceptionVector.literal : AT(LOADADDR(.Level5InterruptVector.text) + ((SIZEOF(.Level5InterruptVector.text) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _DebugExceptionVector_literal_start = ABSOLUTE(.);
    *(.DebugExceptionVector.literal)
    _DebugExceptionVector_literal_end = ABSOLUTE(.);
  } >iram9_seg :iram9_phdr

  .DebugExceptionVector.text : AT(LOADADDR(.DebugExceptionVector.literal) + ((SIZEOF(.DebugExceptionVector.literal) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _DebugExceptionVector_text_start = ABSOLUTE(.);
    KEEP (*(.DebugExceptionVector.text))
    _DebugExceptionVector_text_end = ABSOLUTE(.);
  } >DebugExceptionVector.text_seg :DebugExceptionVector.text_phdr

  .NMIExceptionVector.literal : AT(LOADADDR(.DebugExceptionVector.text) + ((SIZEOF(.DebugExceptionVector.text) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _NMIExceptionVector_literal_start = ABSOLUTE(.);
    *(.NMIExceptionVector.literal)
    _NMIExceptionVector_literal_end = ABSOLUTE(.);
  } >iram11_seg :iram11_phdr

  .NMIExceptionVector.text : AT(LOADADDR(.NMIExceptionVector.literal) + ((SIZEOF(.NMIExceptionVector.literal) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _NMIExceptionVector_text_start = ABSOLUTE(.);
    KEEP (*(.NMIExceptionVector.text))
    _NMIExceptionVector_text_end = ABSOLUTE(.);
  } >NMIExceptionVector.text_seg :NMIExceptionVector.text_phdr

  .KernelExceptionVector.literal : AT(LOADADDR(.NMIExceptionVector.text) + ((SIZEOF(.NMIExceptionVector.text) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _KernelExceptionVector_literal_start = ABSOLUTE(.);
    *(.KernelExceptionVector.literal)
    _KernelExceptionVector_literal_end = ABSOLUTE(.);
  } >iram13_seg :iram13_phdr

  .KernelExceptionVector.text : AT(LOADADDR(.KernelExceptionVector.literal) + ((SIZEOF(.KernelExceptionVector.literal) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _KernelExceptionVector_text_start = ABSOLUTE(.);
    KEEP (*(.KernelExceptionVector.text))
    _KernelExceptionVector_text_end = ABSOLUTE(.);
  } >KernelExceptionVector.text_seg :KernelExceptionVector.text_phdr

  .UserExceptionVector.literal : AT(LOADADDR(.KernelExceptionVector.text) + ((SIZEOF(.KernelExceptionVector.text) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _UserExceptionVector_literal_start = ABSOLUTE(.);
    *(.UserExceptionVector.literal)
    _UserExceptionVector_literal_end = ABSOLUTE(.);
  } >iram15_seg :iram15_phdr

  .UserExceptionVector.text : AT(LOADADDR(.UserExceptionVector.literal) + ((SIZEOF(.UserExceptionVector.literal) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _UserExceptionVector_text_start = ABSOLUTE(.);
    KEEP (*(.UserExceptionVector.text))
    _UserExceptionVector_text_end = ABSOLUTE(.);
  } >UserExceptionVector.text_seg :UserExceptionVector.text_phdr

  .DoubleExceptionVector.literal : AT(LOADADDR(.UserExceptionVector.text) + ((SIZEOF(.UserExceptionVector.text) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _DoubleExceptionVector_literal_start = ABSOLUTE(.);
    *(.DoubleExceptionVector.literal)
    _DoubleExceptionVector_literal_end = ABSOLUTE(.);
  } >iram17_seg :iram17_phdr

  .DoubleExceptionVector.text : AT(LOADADDR(.DoubleExceptionVector.literal) + ((SIZEOF(.DoubleExceptionVector.literal) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _DoubleExceptionVector_text_start = ABSOLUTE(.);
    KEEP (*(.DoubleExceptionVector.text))
    _DoubleExceptionVector_text_end = ABSOLUTE(.);
  } >DoubleExceptionVector.text_seg :DoubleExceptionVector.text_phdr

  .exc : AT(LOADADDR(.DoubleExceptionVector.text) + ((SIZEOF(.DoubleExceptionVector.text) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _exc_start = ABSOLUTE(.);
    *(.exc)
    _exc_end = ABSOLUTE(.);
  } >exc_seg :exc_phdr

  .sram.rodata : AT(LOADADDR(.exc) + ((SIZEOF(.exc) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _sram_rodata_start = ABSOLUTE(.);
    *(.sram.rodata)
    _sram_rodata_end = ABSOLUTE(.);
  } >sram20_seg :sram20_phdr

  .rodata : AT(LOADADDR(.sram.rodata) + (ADDR(.rodata) - ADDR(.sram.rodata))) ALIGN(4)
  {
    _rodata_start = ABSOLUTE(.);
    *(.rodata)
    *(.rodata.*)
    *(.gnu.linkonce.r.*)
    *(.rodata1)
    __XT_EXCEPTION_TABLE__ = ABSOLUTE(.);
    KEEP (*(.xt_except_table))
    KEEP (*(.gcc_except_table))
    *(.gnu.linkonce.e.*)
    *(.gnu.version_r)
    KEEP (*(.eh_frame))
    /*  C++ constructor and destructor tables, properly ordered:  */
    KEEP (*crtbegin.o(.ctors))
    KEEP (*(EXCLUDE_FILE (*crtend.o) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*(.ctors))
    KEEP (*crtbegin.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend.o) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*(.dtors))
    /*  C++ exception handlers table:  */
    __XT_EXCEPTION_DESCS__ = ABSOLUTE(.);
    *(.xt_except_desc)
    *(.gnu.linkonce.h.*)
    __XT_EXCEPTION_DESCS_END__ = ABSOLUTE(.);
    *(.xt_except_desc_end)
    *(.dynamic)
    *(.gnu.version_d)
    . = ALIGN(4);		/* this table MUST be 4-byte aligned */
    _bss_table_start = ABSOLUTE(.);
    LONG(_bss_start)
    LONG(_bss_end)
    _bss_table_end = ABSOLUTE(.);
    _rodata_end = ABSOLUTE(.);
  } >sram20_seg :sram20_phdr

  .lit4 : AT(LOADADDR(.rodata) + (ADDR(.lit4) - ADDR(.rodata))) ALIGN(4)
  {
    _lit4_start = ABSOLUTE(.);
    *(*.lit4)
    *(.lit4.*)
    *(.gnu.linkonce.lit4.*)
    _lit4_end = ABSOLUTE(.);
  } >sram20_seg :sram20_phdr

  .ResetVector.literal : AT(LOADADDR(.lit4) + (ADDR(.ResetVector.literal) - ADDR(.lit4))) ALIGN(4)
  {
    _ResetVector_literal_start = ABSOLUTE(.);
    *(.ResetVector.literal)
    _ResetVector_literal_end = ABSOLUTE(.);
  } >sram20_seg :sram20_phdr

  .sram.text : AT(LOADADDR(.ResetVector.literal) + (ADDR(.sram.text) - ADDR(.ResetVector.literal))) ALIGN(4)
  {
    _sram_text_start = ABSOLUTE(.);
    *(.sram.literal .sram.text)
    _sram_text_end = ABSOLUTE(.);
  } >sram20_seg :sram20_phdr

  .text : AT(LOADADDR(.sram.text) + (ADDR(.text) - ADDR(.sram.text))) ALIGN(4)
  {
    _stext = .;
    _text_start = ABSOLUTE(.);
    *(.entry.text)
    *(.init.literal)
    KEEP(*(.init))
    *(.literal .text .literal.* .text.* .stub .gnu.warning .gnu.linkonce.literal.* .gnu.linkonce.t.*.literal .gnu.linkonce.t.*)
    *(.fini.literal)
    KEEP(*(.fini))
    *(.gnu.version)
    _text_end = ABSOLUTE(.);
    _etext = .;
  } >sram20_seg :sram20_phdr

  .sram.data : AT(LOADADDR(.text) + (ADDR(.sram.data) - ADDR(.text))) ALIGN(4)
  {
    _sram_data_start = ABSOLUTE(.);
    *(.sram.data)
    _sram_data_end = ABSOLUTE(.);
  } >sram20_seg :sram20_phdr

  .data : AT(LOADADDR(.sram.data) + (ADDR(.data) - ADDR(.sram.data))) ALIGN(4)
  {
    _data_start = ABSOLUTE(.);
    *(.data)
    *(.data.*)
    *(.gnu.linkonce.d.*)
    KEEP(*(.gnu.linkonce.d.*personality*))
    *(.data1)
    *(.sdata)
    *(.sdata.*)
    *(.gnu.linkonce.s.*)
    *(.sdata2)
    *(.sdata2.*)
    *(.gnu.linkonce.s2.*)
    KEEP(*(.jcr))
    _data_end = ABSOLUTE(.);
  } >sram20_seg :sram20_phdr

  .bss (NOLOAD) : ALIGN(8)
  {
    . = ALIGN (8);
    _bss_start = ABSOLUTE(.);
    *(.dynsbss)
    *(.sbss)
    *(.sbss.*)
    *(.gnu.linkonce.sb.*)
    *(.scommon)
    *(.sbss2)
    *(.sbss2.*)
    *(.gnu.linkonce.sb2.*)
    *(.dynbss)
    *(.bss)
    *(.bss.*)
    *(.gnu.linkonce.b.*)
    *(COMMON)
    *(.sram.bss)
    . = ALIGN (8);
    _bss_end = ABSOLUTE(.);
    _end = ALIGN(0x8);
    PROVIDE(end = ALIGN(0x8));
    _stack_sentry = ALIGN(0x8);
  } >sram20_seg :sram20_bss_phdr
 __stack = 0x40140000;
  _heap_sentry = 0x40140000;

  .scmask.data : AT(LOADADDR(.data) + ((SIZEOF(.data) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _scmask_data_start = ABSOLUTE(.);
    *(.scmask.data)
    _scmask_data_end = ABSOLUTE(.);
  } >scmask_seg :scmask_phdr

  .rtbat.data : AT(LOADADDR(.scmask.data) + ((SIZEOF(.scmask.data) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _rtbat_data_start = ABSOLUTE(.);
    *(.rtbat.data)
    _rtbat_data_end = ABSOLUTE(.);
  } >rtbat_seg :rtbat_phdr

  .scg.data : AT(LOADADDR(.rtbat.data) + ((SIZEOF(.rtbat.data) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _scg_data_start = ABSOLUTE(.);
    *(.scg.data)
    _scg_data_end = ABSOLUTE(.);
  } >scg_seg :scg_phdr

  .snr.data : AT(LOADADDR(.scg.data) + ((SIZEOF(.scg.data) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _snr_data_start = ABSOLUTE(.);
    *(.snr.data)
    _snr_data_end = ABSOLUTE(.);
  } >snr_seg :snr_phdr

  .scrm.data : AT(LOADADDR(.snr.data) + ((SIZEOF(.snr.data) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _scrm_data_start = ABSOLUTE(.);
    *(.scrm.data)
    _scrm_data_end = ABSOLUTE(.);
  } >scrm_seg :scrm_phdr

  .beta.data : AT(LOADADDR(.scrm.data) + ((SIZEOF(.scrm.data) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _beta_data_start = ABSOLUTE(.);
    *(.beta.data)
    _beta_data_end = ABSOLUTE(.);
  } >beta_seg :beta_phdr

  .pd_pat.data : AT(LOADADDR(.beta.data) + ((SIZEOF(.beta.data) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _pd_pat_data_start = ABSOLUTE(.);
    *(.pd_pat.data)
    _pd_pat_data_end = ABSOLUTE(.);
  } >pd_pat_seg :pd_pat_phdr

  .cau_istr.data : AT(LOADADDR(.pd_pat.data) + ((SIZEOF(.pd_pat.data) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _cau_istr_data_start = ABSOLUTE(.);
    *(.cau_istr.data)
    _cau_istr_data_end = ABSOLUTE(.);
  } >cau_istr_seg :cau_istr_phdr

  .cau_lut0.data : AT(LOADADDR(.cau_istr.data) + ((SIZEOF(.cau_istr.data) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _cau_lut0_data_start = ABSOLUTE(.);
    *(.cau_lut0.data)
    _cau_lut0_data_end = ABSOLUTE(.);
  } >cau_lut0_seg :cau_lut0_phdr

  .cau_lut1.data : AT(LOADADDR(.cau_lut0.data) + ((SIZEOF(.cau_lut0.data) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _cau_lut1_data_start = ABSOLUTE(.);
    *(.cau_lut1.data)
    _cau_lut1_data_end = ABSOLUTE(.);
  } >cau_lut1_seg :cau_lut1_phdr

  .cau_mem0.data : AT(LOADADDR(.cau_lut1.data) + ((SIZEOF(.cau_lut1.data) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _cau_mem0_data_start = ABSOLUTE(.);
    *(.cau_mem0.data)
    _cau_mem0_data_end = ABSOLUTE(.);
  } >cau_mem0_seg :cau_mem0_phdr

  .cau_mem1.data : AT(LOADADDR(.cau_mem0.data) + ((SIZEOF(.cau_mem0.data) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _cau_mem1_data_start = ABSOLUTE(.);
    *(.cau_mem1.data)
    _cau_mem1_data_end = ABSOLUTE(.);
  } >cau_mem1_seg :cau_mem1_phdr

  .cau_mem2.data : AT(LOADADDR(.cau_mem1.data) + ((SIZEOF(.cau_mem1.data) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _cau_mem2_data_start = ABSOLUTE(.);
    *(.cau_mem2.data)
    _cau_mem2_data_end = ABSOLUTE(.);
  } >cau_mem2_seg :cau_mem2_phdr

  .cau_mem3.data : AT(LOADADDR(.cau_mem2.data) + ((SIZEOF(.cau_mem2.data) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _cau_mem3_data_start = ABSOLUTE(.);
    *(.cau_mem3.data)
    _cau_mem3_data_end = ABSOLUTE(.);
  } >cau_mem3_seg :cau_mem3_phdr

  .sc_intl_map0.data : AT(LOADADDR(.cau_mem3.data) + ((SIZEOF(.cau_mem3.data) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _sc_intl_map0_data_start = ABSOLUTE(.);
    *(.sc_intl_map0.data)
    _sc_intl_map0_data_end = ABSOLUTE(.);
  } >sc_intl_map0_seg :sc_intl_map0_phdr

  .sc_intl_map1.data : AT(LOADADDR(.sc_intl_map0.data) + ((SIZEOF(.sc_intl_map0.data) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _sc_intl_map1_data_start = ABSOLUTE(.);
    *(.sc_intl_map1.data)
    _sc_intl_map1_data_end = ABSOLUTE(.);
  } >sc_intl_map1_seg :sc_intl_map1_phdr

  .sc_intl_idx0.data : AT(LOADADDR(.sc_intl_map1.data) + ((SIZEOF(.sc_intl_map1.data) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _sc_intl_idx0_data_start = ABSOLUTE(.);
    *(.sc_intl_idx0.data)
    _sc_intl_idx0_data_end = ABSOLUTE(.);
  } >sc_intl_idx0_seg :sc_intl_idx0_phdr

  .sc_intl_idx1.data : AT(LOADADDR(.sc_intl_idx0.data) + ((SIZEOF(.sc_intl_idx0.data) + 3) & 0xFFFFFFFC)) ALIGN(4)
  {
    _sc_intl_idx1_data_start = ABSOLUTE(.);
    *(.sc_intl_idx1.data)
    _sc_intl_idx1_data_end = ABSOLUTE(.);
  } >sc_intl_idx1_seg :sc_intl_idx1_phdr

  .ResetVector.text : ALIGN(4)
  {
    _ResetVector_text_start = ABSOLUTE(.);
    KEEP (*(.ResetVector.text))
    _ResetVector_text_end = ABSOLUTE(.);
  } >ResetVector.text_seg :ResetVector.text_phdr
  .rom_store_end LOADADDR(.sc_intl_idx1.data) + SIZEOF(.sc_intl_idx1.data) : 
  { 
    _rom_store_end = .;
  } >irom0_seg
  .debug  0 :  { *(.debug) }
  .line  0 :  { *(.line) }
  .debug_srcinfo  0 :  { *(.debug_srcinfo) }
  .debug_sfnames  0 :  { *(.debug_sfnames) }
  .debug_aranges  0 :  { *(.debug_aranges) }
  .debug_pubnames  0 :  { *(.debug_pubnames) }
  .debug_info  0 :  { *(.debug_info) }
  .debug_abbrev  0 :  { *(.debug_abbrev) }
  .debug_line  0 :  { *(.debug_line) }
  .debug_frame  0 :  { *(.debug_frame) }
  .debug_str  0 :  { *(.debug_str) }
  .debug_loc  0 :  { *(.debug_loc) }
  .debug_macinfo  0 :  { *(.debug_macinfo) }
  .debug_weaknames  0 :  { *(.debug_weaknames) }
  .debug_funcnames  0 :  { *(.debug_funcnames) }
  .debug_typenames  0 :  { *(.debug_typenames) }
  .debug_varnames  0 :  { *(.debug_varnames) }
  .xt.insn 0 :
  {
    KEEP (*(.xt.insn))
    KEEP (*(.gnu.linkonce.x.*))
  }
  .xt.prop 0 :
  {
    KEEP (*(.xt.prop))
    KEEP (*(.xt.prop.*))
    KEEP (*(.gnu.linkonce.prop.*))
  }
  .xt.lit 0 :
  {
    KEEP (*(.xt.lit))
    KEEP (*(.xt.lit.*))
    KEEP (*(.gnu.linkonce.p.*))
  }
  .xt.profile_range 0 :
  {
    KEEP (*(.xt.profile_range))
    KEEP (*(.gnu.linkonce.profile_range.*))
  }
  .xt.profile_ranges 0 :
  {
    KEEP (*(.xt.profile_ranges))
    KEEP (*(.gnu.linkonce.xt.profile_ranges.*))
  }
  .xt.profile_files 0 :
  {
    KEEP (*(.xt.profile_files))
    KEEP (*(.gnu.linkonce.xt.profile_files.*))
  }
}

